// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum DocumentStateEnum {
  DENY
  ACCESS
  REJECT
  FORWARD
}

enum PermissionKindEnum {
  OPENING
  CLOSSING
}

enum Risk {
  HIGH
  MEDUIM
  LOW
}

enum States {
  PENDING
  DECLINED
  ACCESSED
}

enum EmployeeRole {
  EMPLOYEE
  AUTHOR
  DISTRIBUTOR
}

enum TestcaseEnum {
  CREATED
  STARTED
  ENDED
}

model User {
  id          Int       @id @default(autoincrement())
  username    String?   @db.VarChar(50)
  password    String?   @db.VarChar(255)
  email       String?   @db.VarChar(180)
  mobile      String?   @db.VarChar(15)
  isDeleted   Boolean   @default(false) @map("is_deleted") @db.Boolean
  timeCreated DateTime  @default(now()) @map("time_created")
  employee    Employee?

  //foreign key 
  Document Document[]

  @@map("auth_user")
}

model UserData {
  authUserId  Int        @id @map("auth_user_id") @db.Integer
  permissions Json       @default("[]") @map("permissions")
  timeUpdated DateTime   @default(now()) @map("time_updated") @db.Timestamptz()
  documents   Document[]

  @@map("auth_user_data")
}

model Document {
  id          Int               @id @default(autoincrement())
  title       String            @unique @db.VarChar(100)
  generate    String?           @db.VarChar(30)
  state       DocumentStateEnum
  statement   String?           @db.VarChar(50)
  authuserId  Int?
  timeCreated DateTime          @default(now())
  timeUpdated DateTime          @updatedAt
  isDeleted   Boolean           @default(false)
  userDataId  Int?

  detail           DocumentDetail[]    @relation("detail")
  permission       Permission[]        @relation("document")
  attribute        DocumentAttribute[] @relation("attribute")
  budget           DocumentBudget[]    @relation("budget")
  riskassessment   RiskAssessment[]    @relation("assessent")
  testcase         TestCase[]          @relation("testcase")
  documentemployee DocumentEmployee[]  @relation("documentemployee")
  schedule         Schedule[]          @relation("schedules")
  userData         UserData?           @relation(fields: [userDataId], references: [authUserId], onDelete: Cascade)
  user             User?               @relation(fields: [authuserId], references: [id], onDelete: Cascade)
  test             Test[]
}

model Test {
  id            String   @id @default(uuid())
  employeeId    Int
  jobPositionId Int
  departmentId  Int
  role          String   @db.VarChar(200)
  documentId    Int
  timeCreated   DateTime @default(now())
  timeUpdated   DateTime @updatedAt
  isDeleted     Boolean  @default(false)

  //relation
  document    Document    @relation(fields: [documentId], references: [id])
  jobPosition JobPosition @relation(fields: [jobPositionId], references: [id])
  department  Department  @relation(fields: [departmentId], references: [id])
  Employee    Employee    @relation(fields: [employeeId], references: [id])
}

model DocumentDetail {
  id    String @id @default(uuid())
  intro String @db.Text
  aim   String @db.Text

  //foreign key
  document   Document @relation("detail", fields: [documentId], references: [id], onDelete: Cascade)
  documentId Int

  @@unique([intro, aim])
}

model Schedule {
  id      String   @id @default(uuid())
  role    String   @db.VarChar(100)
  created DateTime @default(now())
  ended   DateTime @updatedAt

  employee Employee[] @relation("employees")
  document Document[] @relation("schedules")
}

model Permission {
  id    String             @id @default(uuid())
  kind  PermissionKindEnum
  state String             @db.VarChar(100)

  //relation
  document    Document[]    @relation("document")
  department  Department[]  @relation("department")
  jobposition JobPosition[] @relation("jobposition")
  timeCreated DateTime      @default(now())
  timeAction  DateTime      @updatedAt
}

model Department {
  id             Int      @id @default(autoincrement())
  parentId       Int      @map("parent_id")
  name           String?  @db.VarChar(255)
  description    String?  @db.VarChar(255)
  authDivision   Boolean  @default(false) @map("auth_division") @db.Boolean
  isDeleted      Boolean  @default(false) @map("is_deleted") @db.Boolean
  timeCreated    DateTime @default(now()) @map("time_created")
  parentsNesting String?  @map("parents_nesting") @db.VarChar(255)

  //foreign key
  permission              Permission[]             @relation("department")
  jobPositions            JobPosition[]
  employees               Employee[]
  departmentEmployeeRoles DepartmentEmployeeRole[]
  Test                    Test[]

  @@map("department")
}

model DepartmentEmployeeRole {
  id           String     @id @default(uuid()) @db.Uuid
  departmentId Int        @map("department_id")
  employeeId   Int        @map("employee_id")
  role         String     @map("role") @db.VarChar(30)
  isDeleted    Boolean    @default(false) @map("is_deleted") @db.Boolean
  timeCreated  DateTime   @default(now()) @map("time_created")
  // Relations
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  employee     Employee   @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("department_employee_role")
}

model JobPosition {
  id           Int      @id @default(autoincrement())
  departmentId Int      @map("department_id") @db.Integer
  jobGroupId   Int?     @map("job_group_id") @db.Integer
  name         String?  @db.VarChar(100)
  description  String?  @db.VarChar(255)
  isDeleted    Boolean  @default(false) @map("is_deleted") @db.Boolean
  timeCreated  DateTime @default(now()) @map("time_created")

  //foreign key
  department       Department         @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  permission       Permission[]       @relation("jobposition")
  employee         Employee[]
  obGroup          JobPositionGroup?  @relation(fields: [jobGroupId], references: [id], onDelete: Cascade)
  Test             Test[]
  DocumentEmployee DocumentEmployee[]
}

model JobPositionGroup {
  id          Int      @id @default(autoincrement())
  name        String?  @db.VarChar(255)
  jobAuthRank Int?     @map("job_auth_rank") @db.Integer
  description String?  @db.VarChar(255)
  isDeleted   Boolean  @default(false) @map("is_deleted") @db.Boolean
  timeCreated DateTime @default(now()) @map("time_created")

  // relations
  jobPositions JobPosition[]

  @@map("job_position_group")
}

model Employee {
  id                Int      @id @default(autoincrement()) @db.Integer
  departmentId      Int      @map("department_id") @db.Integer
  jobPositionId     Int?     @map("job_position_id") @db.Integer
  firstname         String   @db.VarChar(80)
  lastname          String   @db.VarChar(80)
  familyName        String   @map("family_name") @db.VarChar(80)
  gender            String?  @db.VarChar(10)
  regNum            String   @unique @map("reg_num") @db.VarChar(10)
  birthDate         DateTime @map("birth_date") @db.Date
  employmentStateId Int?     @map("employment_state_id") @db.Integer
  stateId           Int?     @map("state_id") @db.Integer
  authUserId        Int?     @unique @map("auth_user_id") @db.Integer
  isDeleted         Boolean  @default(false) @map("is_deleted") @db.Boolean
  note              String?  @db.VarChar(255)

  //foreign key
  state                   EmployeeState?           @relation(fields: [stateId], references: [id], onDelete: Cascade)
  authUser                User?                    @relation(fields: [authUserId], references: [id], onDelete: Cascade)
  schedule                Schedule[]               @relation("employees")
  jobPosition             JobPosition?             @relation(fields: [jobPositionId], references: [id], onDelete: Cascade)
  department              Department               @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  departmentEmployeeRoles DepartmentEmployeeRole[]
  createdAt               DateTime                 @default(now())
  endedAt                 DateTime                 @updatedAt
  // Document                Document?                @relation(fields: [documentId], references: [id])
  // documentId              Int?
  Test                    Test[]
  DocumentEmployee        DocumentEmployee[]

  @@map("employee")
}

model EmployeeState {
  id            Int        @id @default(autoincrement())
  name          String?    @db.VarChar(255)
  description   String?    @db.VarChar(255)
  isDefault     Boolean    @default(false) @map("is_default") @db.Boolean
  needFillIn    Boolean    @default(false) @map("need_fill_in") @db.Boolean
  isDeleted     Boolean    @default(false) @map("is_deleted") @db.Boolean
  userCreatedId Int        @map("user_created_id") @db.Integer
  timeCreated   DateTime   @default(now()) @map("time_created")
  employees     Employee[]

  @@map("employee_state")
}

model DocumentAttribute {
  id           String @id @default(uuid())
  categoryMain String @db.VarChar(250)
  category     String @db.VarChar(250)
  value        String @db.Text
  orderIndex   Int    @default(1)

  //relation
  document   Document @relation("attribute", fields: [documentId], references: [id], onDelete: Cascade)
  documentId Int

  @@unique([categoryMain, category, value, orderIndex])
}

model DocumentBudget {
  id              String @id @default(uuid())
  productCategory String @db.Text
  product         String @db.Text
  amount          Int    @default(0)
  priceUnit       Int    @default(0)
  priceTotal      Int    @default(0)

  //relation
  document   Document @relation("budget", fields: [documentId], references: [id], onDelete: Cascade)
  documentId Int
}

model DocumentEmployee {
  id            String      @id @default(uuid())
  employeeId    Int
  jobPositionId Int
  role          String      @db.VarChar(200)
  startedDate   DateTime
  endDate       DateTime
  documentId    Int
  timeCreated   DateTime    @default(now())
  updateTimed   DateTime    @updatedAt
  //relation
  document      Document    @relation("documentemployee", fields: [documentId], references: [id], onDelete: Cascade)
  employee      Employee    @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  jobPosition   JobPosition @relation(fields: [jobPositionId], references: [id], onDelete: Cascade)
}

model RiskAssessment {
  id                 String @id @default(uuid())
  riskDescription    String @db.Text
  riskLevel          Risk
  affectionLevel     Risk
  mitigationStrategy String @db.Text

  //relation
  document   Document @relation("assessent", fields: [documentId], references: [id], onDelete: Cascade)
  documentId Int

  @@unique([riskDescription, mitigationStrategy])
}

model TestCase {
  id String @id @default(uuid())

  category String @db.VarChar(100)
  types    String @db.VarChar(100)
  steps    String @db.Text
  result   String @db.VarChar(100)
  division String @db.VarChar(100)

  //relation
  document   Document @relation("testcase", fields: [documentId], references: [id], onDelete: Cascade)
  documentId Int

  //foreign key
  testcase    TestCaseImage[] @relation("testcaseimage")
  testCaseDes TesctCaseDes[]
  timeCreated DateTime        @default(now())
  startDate   DateTime?
  endDate     DateTime?
  testType    TestcaseEnum
  File        File[]
}

model TestCaseImage {
  id         String   @id @default(uuid())
  path       String   @db.Text
  testcaseId String
  createdAt  DateTime @default(now())

  //relation
  testcase TestCase @relation("testcaseimage", fields: [testcaseId], references: [id], onDelete: Cascade)
}

model TesctCaseDes {
  id                 String   @id @default(uuid())
  startedDescription String?  @db.Text
  endedDescription   String?  @db.Text
  createdAt          DateTime @default(now())

  //relation 

  testCaseId String
  TestCase   TestCase @relation(fields: [testCaseId], references: [id])
}

model File {
  id         Int      @id @default(autoincrement())
  fileName   String   @db.VarChar(30)
  path       String   @db.Text
  createdAt  DateTime @default(now())
  testCaseId String
  TestCase   TestCase @relation(fields: [testCaseId], references: [id])
}

// model Role {
//   id   String @id @default(uuid())
//   role String @db.VarChar(50)

//   @@map("role")
// }

// model EmployeePermission {
//   id String @id @default(uuid())
// }
