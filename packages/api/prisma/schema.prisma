// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum DocumentStateEnum {
  DENY
  ACCESS
  REJECT
  FORWARD
}

enum PermissionKindEnum {
  OPENING 
  CLOSSING
}

enum States {
  PENDING
  DECLINED
  ACCESSED
}

enum EmployeeRole {
  EMPLOYEE 
  AUTHOR
  DISTRIBUTOR
}

model User {
  id          Int       @id @default(autoincrement())
  username    String?   @db.VarChar(50)
  password    String?   @db.VarChar(255)
  email       String?   @db.VarChar(180)
  mobile      String?   @db.VarChar(15)
  isDeleted   Boolean   @default(false) @map("is_deleted") @db.Boolean
  timeCreated DateTime  @default(now()) @map("time_created")
  employee    Employee?
  document Document[] @relation("user_document")
  @@map("auth_user")

}

model UserData {
  authUserId Int @id @map("auth_user_id") @db.Integer
  permissions Json     @default("[]") @map("permissions")
  timeUpdated DateTime @default(now()) @map("time_updated") @db.Timestamptz()
  documents Document[]
  @@map("auth_user_data")
}

model Document {
  id String @id @default(uuid())
  title String @db.VarChar(100) @unique
  state String @default("DENY")
  index String?
  order String?
  // userCreatedId Int?
  userCreatedId User[] @relation("user_document")
  timeCreated DateTime @default(now())
  timeUpdated DateTime @updatedAt
  isDeleted Boolean @default(false)
  userDataId Int?

  //relation
  // user User[] @relation("user_document")
  detail DocumentDetail[] @relation("detail")
  permission Permission[] @relation("document")
  attribute DocumentAttribute[] @relation("attribute")
  budget DocumentBudget[] @relation("budget")
  riskassessment RiskAssessment[] @relation("assessent")
  testcase TestCase[] @relation("testcase")
  documentemployee DocumentEmployee[] @relation("documentemployee")
  schedule Schedule[] @relation("schedules")
  userData UserData? @relation(fields: [userDataId], references: [authUserId],onDelete: Cascade)
  @@unique([index, order, state])
}

model DocumentDetail {
  id String @id @default(uuid())
  intro String @db.VarChar(200)
  aim String @db.VarChar(200)

  //foreign key
  document Document @relation("detail", fields: [documentId], references: [id], onDelete: Cascade)
  documentId String
  @@unique([intro, aim])
}

model Schedule {
  id String @id @default(uuid())
  role String @db.VarChar(100)
  created DateTime @default(now())
  ended DateTime @updatedAt
  employee Employee[] @relation("employees")
  document Document[] @relation("schedules")
}

model Permission {
  id String @id @default(uuid())
  kind PermissionKindEnum
  state String @db.VarChar(100)

  //relation
  document Document[] @relation("document")
  department Department[] @relation("department")
  jobposition JobPosition[] @relation("jobposition")
  timeCreated DateTime @default(now())
  timeAction DateTime @updatedAt
}

model Department {
  id             Int      @id @default(autoincrement())
  parentId       Int      @map("parent_id")
  name           String?  @db.VarChar(255)
  description    String?  @db.VarChar(255)
  authDivision   Boolean  @default(false) @map("auth_division") @db.Boolean
  isDeleted      Boolean  @default(false) @map("is_deleted") @db.Boolean
  timeCreated    DateTime @default(now()) @map("time_created")
  parentsNesting String?  @map("parents_nesting") @db.VarChar(255)

  //foreign key
  permission Permission[] @relation("department")
  jobPositions            JobPosition[]
  employees               Employee[]
  departmentEmployeeRoles DepartmentEmployeeRole[]
  
  @@map("department")
}

model DepartmentEmployeeRole {
  id           String     @id @default(uuid()) @db.Uuid
  departmentId Int        @map("department_id")
  employeeId   Int        @map("employee_id")
  role         String     @map("role") @db.VarChar(30)
  isDeleted    Boolean    @default(false) @map("is_deleted") @db.Boolean
  timeCreated  DateTime   @default(now()) @map("time_created")
  // Relations
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  employee     Employee   @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("department_employee_role")
}

model JobPosition {
  id           Int               @id @default(autoincrement())
  departmentId Int               @map("department_id") @db.Integer
  jobGroupId   Int?              @map("job_group_id") @db.Integer
  name         String?           @db.VarChar(100)
  description  String?           @db.VarChar(255)
  isDeleted    Boolean           @default(false) @map("is_deleted") @db.Boolean
  timeCreated  DateTime          @default(now()) @map("time_created")

  //foreign key
  department  Department  @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  permission Permission[] @relation("jobposition")
  employee     Employee[]
  obGroup     JobPositionGroup? @relation(fields: [jobGroupId], references: [id], onDelete: Cascade)
}

model JobPositionGroup {
  id          Int      @id @default(autoincrement())
  name        String?  @db.VarChar(255)
  jobAuthRank Int?     @map("job_auth_rank") @db.Integer
  description String?  @db.VarChar(255)
  isDeleted   Boolean  @default(false) @map("is_deleted") @db.Boolean
  timeCreated DateTime @default(now()) @map("time_created")

  // relations
  jobPositions JobPosition[]

  @@map("job_position_group")
}

model Employee {
  id                Int      @id @default(autoincrement()) @db.Integer
  departmentId      Int      @map("department_id") @db.Integer
  jobPositionId     Int?     @map("job_position_id") @db.Integer
  firstname         String   @db.VarChar(80)
  lastname          String   @db.VarChar(80)
  familyName        String   @map("family_name") @db.VarChar(80)
  gender            String?  @db.VarChar(10)
  regNum            String   @unique @map("reg_num") @db.VarChar(10)
  birthDate         DateTime @map("birth_date") @db.Date
  employmentStateId Int?     @map("employment_state_id") @db.Integer
  stateId           Int?     @map("state_id") @db.Integer
  authUserId        Int?     @unique @map("auth_user_id") @db.Integer
  isDeleted         Boolean  @default(false) @map("is_deleted") @db.Boolean
  note              String?  @db.VarChar(255)
  
  //foreign key
  state                   EmployeeState?           @relation(fields: [stateId], references: [id], onDelete: Cascade)
  authUser  User? @relation(fields: [authUserId], references: [id], onDelete: Cascade)
  schedule Schedule[] @relation("employees")
  jobPosition             JobPosition?             @relation(fields: [jobPositionId], references: [id], onDelete: Cascade)
  department              Department               @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  departmentEmployeeRoles DepartmentEmployeeRole[]
  createdAt DateTime @default(now())
  endedAt DateTime @updatedAt
  @@map("employee")
}

model EmployeeState {
  id            Int        @id @default(autoincrement())
  name          String?    @db.VarChar(255)
  description   String?    @db.VarChar(255)
  isDefault     Boolean    @default(false) @map("is_default") @db.Boolean
  needFillIn    Boolean    @default(false) @map("need_fill_in") @db.Boolean
  isDeleted     Boolean    @default(false) @map("is_deleted") @db.Boolean
  userCreatedId Int        @map("user_created_id") @db.Integer
  timeCreated   DateTime   @default(now()) @map("time_created")
  employees     Employee[]

  @@map("employee_state")
}

model DocumentAttribute {
  id String @id @default(uuid())
  categoryMain String @db.VarChar(250)
  category String @db.VarChar(250)
  value String @db.Text
  orderIndex Int @default(1)

  //relation
  document Document @relation("attribute", fields: [documentId], references: [id], onDelete: Cascade)
  documentId String
  
  @@unique([categoryMain, category, value, orderIndex])
}

model DocumentBudget {
  id String @id @default(uuid())
  productCategory String @db.Text
  product String @db.Text
  amount Int @default(0)
  priceUnit Int @default(0)
  priceTotal Int @default(0)

  //relation
  document Document @relation("budget", fields: [documentId], references: [id], onDelete: Cascade)
  documentId String
}

model DocumentEmployee {
   id String @id @default(uuid())

  //relation
  document Document @relation("documentemployee", fields: [documentId], references: [id], onDelete: Cascade)
  documentId String
  createdAt DateTime @default(now())
  endedAt DateTime @updatedAt
}

model RiskAssessment {
  id String @id @default(uuid())
  riskDescription String @db.Text
  riskLevel Int @default(1)
  affectionLevel Int @default(1)
  mitigationStrategy String @db.Text
  
  //relation
  document Document @relation("assessent", fields: [documentId], references: [id], onDelete: Cascade)
  documentId String
  @@unique([riskDescription, mitigationStrategy])
}

// model TestCase {
//   id String @id @default(uuid())
 
//   title String @db.VarChar(100)
//   description String @db.Text
//   state States
//   createdAt DateTime @default(now())
//   endedAt DateTime @updatedAt
//   //relation
//   document Document @relation("testcase", fields: [documentId], references: [id])
//   documentId String


//   //foreign key
//   testcase TestCaseImage[] @relation("testcaseimage")
//   userCreatedId DateTime @default(now())
//   timeCreated DateTime @updatedAt
// }

model TestCase {
  id String @id @default(uuid())
 
  category String @db.VarChar(100)
  types String @db.VarChar(100)
  steps String @db.Text
  result String @db.VarChar(100)
  division String @db.VarChar(100)
  //relation
  document Document @relation("testcase", fields: [documentId], references: [id], onDelete: Cascade)
  documentId String


  //foreign key
  testcase TestCaseImage[] @relation("testcaseimage")
  userCreatedId DateTime @default(now())
  timeCreated DateTime @updatedAt
}

model TestCaseImage {
  id String @id @default(uuid())
  file String
  
  //relation
  testcase TestCase @relation("testcaseimage", fields: [testcaseId], references: [id], onDelete: Cascade)
  testcaseId String
  createdAt DateTime @default(now())
  endedAt DateTime @updatedAt
  @@unique([file])
}

model TypesTest {
  id String @id @default(uuid())
  name String @db.VarChar(100) @map("testtype")
}

model Role {
  id String @id @default(uuid())
  role String @db.VarChar(50)
  @@map("role")
}

model File {
  id          Int      @id @default(autoincrement())
  service     String?  @map("service") @db.VarChar(50)
  serviceId   Int      @map("service_id") @db.Integer
  idNestLevel Int      @map("id_nest_level") @db.Integer
  fileType    String?  @map("file_type") @db.VarChar(50)
  mimeType    String?  @map("mime_type") @db.VarChar(50)
  name        String?  @map("name") @db.VarChar(255)
  fileName    String?  @map("file_name") @db.VarChar(255)
  extension   String?  @map("extension") @db.VarChar(10)
  timeCreated DateTime @default(now()) @map("time_created") @db.Timestamptz()

  @@map("file")
}