generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AuthUser {
  id       Int        @id @default(autoincrement())
  username String?    @db.VarChar(50)
  mobile   String?    @db.VarChar(15)
  email    String?    @db.VarChar(180)
  status   String?    @db.VarChar(10)
  Document Document[]
  employee Employee?
}

model Department {
  id                     Int                      @id @default(autoincrement())
  parentId               Int                      @map("parent_id")
  name                   String?                  @db.VarChar(255)
  description            String?                  @db.VarChar(255)
  authDivision           Boolean                  @default(false) @map("auth_division")
  isDeleted              Boolean                  @default(false) @map("is_deleted")
  parentsNesting         String?                  @map("parents_nesting") @db.VarChar(255)
  timeCreated            DateTime                 @default(now()) @map("time_created")
  timeUpdated            DateTime                 @updatedAt
  employees              Employee[]
  jobPositions           JobPosition[]
  departmentEmployeeRole DepartmentEmployeeRole[]
  permission             Permission[]             @relation("department")
}

model JobPosition {
  id                     Int                      @id @default(autoincrement())
  departmentId           Int
  jobGroupId             Int?
  name                   String?                  @db.VarChar(100)
  description            String?                  @db.VarChar(255)
  isDeleted              Boolean                  @default(false) @map("is_deleted")
  timeCreated            DateTime                 @default(now()) @map("time_created")
  timeUpdated            DateTime                 @updatedAt
  DocumentEmployee       DocumentEmployee[]
  employee               Employee[]
  department             Department               @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  jobPositionGroup       JobPositionGroup?        @relation(fields: [jobGroupId], references: [id], onDelete: Cascade)
  departmentEmployeeRole DepartmentEmployeeRole[]
  permission             Permission[]             @relation("jobposition")
}

model JobPositionGroup {
  id           Int           @id @default(autoincrement())
  name         String?       @db.VarChar(255)
  jobAuthRank  Int?          @map("job_auth_rank")
  description  String?       @db.VarChar(255)
  isDeleted    Boolean       @default(false) @map("is_deleted")
  timeCreated  DateTime      @default(now()) @map("time_created")
  jobPositions JobPosition[]
}

model Employee {
  id                     Int                      @id @default(autoincrement())
  departmentId           Int                      @map("department_id")
  jobPositionId          Int?                     @map("job_position_id")
  firstname              String                   @db.VarChar(80)
  lastname               String                   @db.VarChar(80)
  familyName             String                   @map("family_name") @db.VarChar(80)
  gender                 String?                  @db.VarChar(10)
  regNum                 String                   @unique @map("reg_num") @db.VarChar(10)
  birthDate              DateTime                 @map("birth_date") @db.Date
  stateId                Int?                     @map("state_id")
  authUserId             Int?                     @unique @map("auth_user_id")
  isDeleted              Boolean                  @default(false) @map("is_deleted")
  userCreatedId          Int?                     @map("user_created_id")
  note                   String?                  @db.VarChar(255)
  timeCreated            DateTime                 @default(now()) @map("time_created")
  timeUpdated            DateTime                 @updatedAt
  DocumentEmployee       DocumentEmployee[]
  authUser               AuthUser?                @relation(fields: [authUserId], references: [id], onDelete: Cascade)
  department             Department               @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  jobPosition            JobPosition?             @relation(fields: [jobPositionId], references: [id], onDelete: Cascade)
  departmentEmployeeRole DepartmentEmployeeRole[]
}

model EmployeeState {
  id            Int      @id @default(autoincrement())
  name          String?  @db.VarChar(255)
  description   String?  @db.VarChar(255)
  isDefault     Boolean  @default(false) @map("is_default")
  needFillIn    Boolean  @default(false) @map("need_fill_in")
  isDeleted     Boolean  @default(false) @map("is_deleted")
  userCreatedId Int      @map("user_created_id")
  timeCreated   DateTime @default(now()) @map("time_created")
}

model AuthUserData {
  authUserId  Int        @id @map("auth_user_id")
  permissions Json       @default("[]") @map("permissions")
  timeUpdated DateTime   @default(now()) @map("time_updated") @db.Timestamptz(6)
  documents   Document[]
}

model Document {
  title                  String                   @db.VarChar(500)
  generate               String                   @db.VarChar(30)
  state                  DocumentStateEnum        @default(DENY)
  statement              String?                  @db.VarChar(500)
  authUserId             Int?
  userDataId             Int?
  timeCreated            DateTime                 @default(now())
  timeUpdated            DateTime                 @updatedAt
  isDeleted              Boolean                  @default(false)
  isFull                 Int?                     @default(0)
  id                     Int                      @id @default(autoincrement())
  user                   AuthUser?                @relation(fields: [authUserId], references: [id], onDelete: Cascade)
  userData               AuthUserData?            @relation(fields: [userDataId], references: [authUserId], onDelete: Cascade)
  attribute              DocumentAttribute[]      @relation("attribute")
  budget                 DocumentBudget[]         @relation("budget")
  detail                 DocumentDetail[]         @relation("detail")
  documentemployee       DocumentEmployee[]       @relation("documentemployee")
  file                   File[]
  riskassessment         RiskAssessment[]         @relation("assessent")
  testcase               TestCase[]               @relation("testcase")
  departmentEmployeeRole DepartmentEmployeeRole[]
  permission             Permission[]             @relation("document")
  report                 Report[]                 @relation("report_document")
  @@unique([title, generate, statement])
}

model DepartmentEmployeeRole {
  departmentId  Int?              @map("department_id")
  jobPositionId Int?
  employeeId    Int?              @map("employee_id")
  role          String?           @map("role") @db.VarChar(30)
  state         Json
  permissionLvl Int?              @map("permission_lvl")
  isDeleted     Boolean           @default(false) @map("is_deleted")
  timeCreated   DateTime          @default(now()) @map("time_created")
  timeUpdated   DateTime          @updatedAt
  id            Int               @id @default(autoincrement())
  documentId    Int
  department    Department?       @relation(fields: [departmentId], references: [id])
  document      Document          @relation(fields: [documentId], references: [id], onDelete: Cascade)
  employee      Employee?         @relation(fields: [employeeId], references: [id])
  jobPosition   JobPosition?      @relation(fields: [jobPositionId], references: [id])

  @@map("department_employee_role")
}

model DocumentDetail {
  intro      String   @db.VarChar(500)
  aim        String   @db.VarChar(500)
  id         Int      @id @default(autoincrement())
  documentId Int
  document   Document @relation("detail", fields: [documentId], references: [id], onDelete: Cascade)
}

model DocumentAttribute {
  categoryMain String   @db.VarChar(500)
  category     String   @db.VarChar(500)
  value        String
  orderIndex   Int      @default(1)
  timeCreated  DateTime @default(now())
  updateTimed  DateTime @updatedAt
  id           Int      @id @default(autoincrement())
  documentId   Int
  document     Document @relation("attribute", fields: [documentId], references: [id], onDelete: Cascade)

  @@unique([categoryMain, category, value, orderIndex])
}

model DocumentBudget {
  productCategory String
  product         String
  amount          Int      @default(0)
  priceUnit       Int      @default(0)
  priceTotal      Int      @default(0)
  isFull          Int?     @default(0)
  id              Int      @id @default(autoincrement())
  documentId      Int
  document        Document @relation("budget", fields: [documentId], references: [id], onDelete: Cascade)
}

model DocumentEmployee {
  employeeId    Int
  departmentId  Int?
  jobPositionId Int?
  role          String       @unique @db.VarChar(500)
  startedDate   DateTime
  endDate       DateTime
  id            Int          @id @default(autoincrement())
  documentId    Int
  document      Document     @relation("documentemployee", fields: [documentId], references: [id], onDelete: Cascade)
  employee      Employee     @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  jobPosition   JobPosition? @relation(fields: [jobPositionId], references: [id])
}

model RiskAssessment {
  riskDescription    String?
  riskLevel          Risk?
  affectionLevel     Risk?
  mitigationStrategy String?
  isFull             Int?     @default(0)
  id                 Int      @id @default(autoincrement())
  documentId         Int
  document           Document @relation("assessent", fields: [documentId], references: [id], onDelete: Cascade)

  @@unique([riskDescription, mitigationStrategy])
}

model TestCase {
  category      String          @db.VarChar(500)
  types         String          @db.VarChar(500)
  steps         String
  result        String          @db.VarChar(500)
  division      String          @db.VarChar(500)
  testType      TestcaseEnum    @default(CREATED)
  timeCreated   DateTime        @default(now())
  timeUpdate    DateTime        @updatedAt
  description   String?
  id            Int             @id @default(autoincrement())
  documentId    Int
  document      Document        @relation("testcase", fields: [documentId], references: [id], onDelete: Cascade)
  testCaseImage TestCaseImage[]
}

model TestCaseImage {
  path       String
  createdAt  DateTime @default(now())
  id         Int      @id @default(autoincrement())
  testCaseId Int
  testCase   TestCase @relation(fields: [testCaseId], references: [id], onDelete: Cascade)
}

model File {
  id         Int      @id @default(autoincrement())
  fileName   String   @db.VarChar(200)
  path       String
  createdAt  DateTime @default(now())
  documentId Int
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
}

model Permission {
  id          Int           @id
  timeCreated DateTime      @default(now())
  timeAction  DateTime      @updatedAt
  kind        Json          @default("[]")
  department  Department[]  @relation("department")
  document    Document[]    @relation("document")
  jobposition JobPosition[] @relation("jobposition")
}

model Report {
  reportname       String           @db.VarChar(500)
  reportpurpose    String           @db.VarChar(500)
  reportprocessing String
  reportconclusion String?          @db.VarChar(500)
  reportadvice     String?          @db.VarChar(500)
  isFull           Int?             @default(0)
  id               Int              @id @default(autoincrement())
  issue            ReportIssue[]    @relation("reportissue") 
  team             ReportTeam[]     @relation("reportteam")
  testcase         ReportTestCase[] @relation("reporttestcase")
  document         Document[]       @relation("report_document")

  @@unique([reportname, reportpurpose, reportprocessing, reportconclusion, reportadvice, id])
  @@map("report_document")
}

model ReportTeam {
  name     String
  role     String   @db.VarChar(200)
  started  DateTime @default(now())
  ended    DateTime @updatedAt
  id       Int      @id @default(autoincrement())
  reportId Int
  report   Report   @relation("reportteam", fields: [reportId], references: [id], onDelete: Cascade)

  @@map("report_team")
}

model ReportIssue {
  list      String
  level     IssueLevel @default(LOW)
  value     String
  id        Int        @id @default(autoincrement())
  reportId  Int
  exception Boolean    @default(false)
  report    Report     @relation("reportissue", fields: [reportId], references: [id], onDelete: Cascade)

  @@unique([level, value])
  @@map("report_issue")
}

model ReportTestCase {
  id          Int      @id @default(autoincrement())
  category    String   @db.VarChar(100)
  types       String   @db.VarChar(100)
  steps       String
  result      String   @db.VarChar(100)
  division    String   @db.VarChar(100)
  timeCreated DateTime @default(now())
  timeUpdate  DateTime @updatedAt
  reportId    Int
  report      Report   @relation("reporttestcase", fields: [reportId], references: [id], onDelete: Cascade)

  @@map("report_testcase")
}

enum DocumentStateEnum {
  DENY
  ACCESS
  REJECT
  FORWARD
}

enum Risk {
  HIGH
  MEDIUM
  LOW
}

enum States {
  PENDING
  DECLINED
  ACCESSED
}

enum EmployeeRole {
  EMPLOYEE
  AUTHOR
  DISTRIBUTOR
}

enum IssueLevel {
  INSANE
  HIGH
  MEDIUM
  LOW
}

enum TestcaseEnum {
  CREATED
  STARTED
  ENDED
}
