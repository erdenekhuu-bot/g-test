// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum DocumentStateEnum {
  DENY
  ACCESS
  REJECT
  FORWARD
}

enum PermissionKindEnum {
  OPENING
  CLOSSING
}

enum Risk {
  HIGH
  MEDUIM
  LOW
}

enum States {
  PENDING
  DECLINED
  ACCESSED
}

enum EmployeeRole {
  EMPLOYEE
  AUTHOR
  DISTRIBUTOR
}

enum TestcaseEnum {
  CREATED
  STARTED
  ENDED
}

enum IssueLevel {
  INSANE
  HIGH
  MEDIUM 
  LOW
}

model AuthUser {
  id       Int       @id @default(autoincrement())
  username String?   @db.VarChar(50)
  mobile   String?   @db.VarChar(15)
  email    String?   @db.VarChar(180)
  status   String?   @db.VarChar(10)
  employee Employee?

  //foreign key 
  Document Document[]
}

model Department {
  id             Int      @id @default(autoincrement())
  parentId       Int      @map("parent_id")
  name           String?  @db.VarChar(255)
  description    String?  @db.VarChar(255)
  authDivision   Boolean  @default(false) @map("auth_division") @db.Boolean
  isDeleted      Boolean  @default(false) @map("is_deleted") @db.Boolean
  parentsNesting String?  @map("parents_nesting") @db.VarChar(255)
  timeCreated    DateTime @default(now()) @map("time_created")
  timeUpdated    DateTime @updatedAt

  //foreign key
  jobPositions           JobPosition[]
  employees              Employee[]
  departmentEmployeeRole DepartmentEmployeeRole[]
}

model JobPosition {
  id           Int      @id @default(autoincrement())
  departmentId Int      @db.Integer
  jobGroupId   Int?     @db.Integer
  name         String?  @db.VarChar(100)
  description  String?  @db.VarChar(255)
  isDeleted    Boolean  @default(false) @map("is_deleted") @db.Boolean
  timeCreated  DateTime @default(now()) @map("time_created")
  timeUpdated  DateTime @updatedAt

  //foreign key
  department             Department               @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  employee               Employee[]
  jobPositionGroup       JobPositionGroup?        @relation(fields: [jobGroupId], references: [id], onDelete: Cascade)
  DocumentEmployee       DocumentEmployee[]
  departmentEmployeeRole DepartmentEmployeeRole[]
}

model JobPositionGroup {
  id          Int      @id @default(autoincrement())
  name        String?  @db.VarChar(255)
  jobAuthRank Int?     @map("job_auth_rank") @db.Integer
  description String?  @db.VarChar(255)
  isDeleted   Boolean  @default(false) @map("is_deleted") @db.Boolean
  timeCreated DateTime @default(now()) @map("time_created")

  // relations
  jobPositions JobPosition[]
}

model Employee {
  id            Int      @id @default(autoincrement()) @db.Integer
  departmentId  Int      @map("department_id") @db.Integer
  jobPositionId Int?     @map("job_position_id") @db.Integer
  firstname     String   @db.VarChar(80)
  lastname      String   @db.VarChar(80)
  familyName    String   @map("family_name") @db.VarChar(80)
  gender        String?  @db.VarChar(10)
  regNum        String   @unique @map("reg_num") @db.VarChar(10)
  birthDate     DateTime @map("birth_date") @db.Date
  stateId       Int?     @map("state_id") @db.Integer
  authUserId    Int?     @unique @map("auth_user_id") @db.Integer
  isDeleted     Boolean  @default(false) @map("is_deleted") @db.Boolean
  userCreatedId Int?     @map("user_created_id") @db.Integer
  note          String?  @db.VarChar(255)
  timeCreated   DateTime @default(now()) @map("time_created")
  timeUpdated   DateTime @updatedAt

  //foreign key

  authUser               AuthUser?                @relation(fields: [authUserId], references: [id], onDelete: Cascade)
  jobPosition            JobPosition?             @relation(fields: [jobPositionId], references: [id], onDelete: Cascade)
  department             Department?              @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  DocumentEmployee       DocumentEmployee[]
  departmentEmployeeRole DepartmentEmployeeRole[]
}

model EmployeeState {
  id            Int      @id @default(autoincrement())
  name          String?  @db.VarChar(255)
  description   String?  @db.VarChar(255)
  isDefault     Boolean  @default(false) @map("is_default") @db.Boolean
  needFillIn    Boolean  @default(false) @map("need_fill_in") @db.Boolean
  isDeleted     Boolean  @default(false) @map("is_deleted") @db.Boolean
  userCreatedId Int      @map("user_created_id") @db.Integer
  timeCreated   DateTime @default(now()) @map("time_created")
}

model AuthUserData {
  authUserId  Int        @id @map("auth_user_id") @db.Integer
  permissions Json       @default("[]") @map("permissions")
  timeUpdated DateTime   @default(now()) @map("time_updated") @db.Timestamptz()
  documents   Document[]
}


model Document {
  id          String            @id @default(uuid())  @unique
  title       String            @db.VarChar(100)
  generate    String?           @db.VarChar(30)
  state       DocumentStateEnum @default(DENY)
  statement   String?           @db.VarChar(50)
  authUserId  Int?
  userDataId  Int?
  timeCreated DateTime          @default(now())
  timeUpdated DateTime          @updatedAt
  isDeleted   Boolean           @default(false)
  isFull      Int?              @default(0)
  detail                 DocumentDetail[]         @relation("detail")
  attribute              DocumentAttribute[]      @relation("attribute")
  budget                 DocumentBudget[]         @relation("budget")
  riskassessment         RiskAssessment[]         @relation("assessent")
  testcase               TestCase[]               @relation("testcase")
  documentemployee       DocumentEmployee[]       @relation("documentemployee")
  userData               AuthUserData?            @relation(fields: [userDataId], references: [authUserId], onDelete: Cascade)
  user                   AuthUser?                @relation(fields: [authUserId], references: [id], onDelete: Cascade)
  file                   File[]
  departmentEmployeeRole DepartmentEmployeeRole[] 

  @@unique([title, generate, statement])  
}

model DepartmentEmployeeRole {
  id            String            @id @default(uuid()) @db.Uuid
  departmentId  Int?              @map("department_id")
  jobPositionId Int?
  employeeId    Int?              @map("employee_id")
  role          String?           @map("role") @db.VarChar(30)
  documentId    String
  state         DocumentStateEnum @default(DENY)
  permissionLvl Int?              @map("permission_lvl")
  isDeleted     Boolean           @default(false) @map("is_deleted") @db.Boolean
  timeCreated   DateTime          @default(now()) @map("time_created")
  timeUpdated   DateTime          @updatedAt

  // Relations
  document      Document?         @relation(fields: [documentId], references: [id], onDelete: Cascade)
  jobPosition   JobPosition?      @relation(fields: [jobPositionId], references: [id])
  department    Department?       @relation(fields: [departmentId], references: [id])
  employee      Employee?         @relation(fields: [employeeId], references: [id])

  @@map("department_employee_role")
}

model DocumentDetail {
  id    String @id @default(uuid())
  intro String? @db.VarChar(200)
  aim   String? @db.VarChar(100)

  //foreign key
  document   Document @relation("detail", fields: [documentId], references: [id], onDelete: Cascade)
  documentId String

  @@unique([intro, aim])
}

model DocumentAttribute {
  id           String   @id @default(uuid())
  categoryMain String   @db.VarChar(250)
  category     String   @db.VarChar(250)
  value        String   @db.Text
  orderIndex   Int      @default(1)
  timeCreated  DateTime @default(now())
  updateTimed  DateTime @updatedAt

  //relation
  document     Document @relation("attribute", fields: [documentId], references: [id], onDelete: Cascade)
  documentId   String

  @@unique([categoryMain, category, value, orderIndex])
}

model DocumentBudget {
  id              String @id @default(uuid())
  productCategory String @db.Text
  product         String @db.Text
  amount          Int    @default(0)
  priceUnit       Int    @default(0)
  priceTotal      Int    @default(0)
  isFull      Int?       @default(0)
  //relation
  document   Document @relation("budget", fields: [documentId], references: [id], onDelete: Cascade)
  documentId String
}

model DocumentEmployee {
  id            String   @id @default(uuid()) @unique
  employeeId    Int
  departmentId  Int?
  jobPositionId Int?
  role          String   @db.VarChar(200)   @unique
  startedDate   DateTime
  endDate       DateTime
  documentId    String

  timeCreated DateTime @default(now())
  updateTimed DateTime @updatedAt
  //relation
  document    Document @relation("documentemployee", fields: [documentId], references: [id], onDelete: Cascade)
  employee    Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  jobPosition JobPosition? @relation(fields: [jobPositionId], references: [id])
}

model RiskAssessment {
  id                 String  @id @default(uuid())
  riskDescription    String? @db.Text
  riskLevel          Risk?
  affectionLevel     Risk?
  mitigationStrategy String? @db.Text
  isFull      Int?              @default(0)
  //relation
  document   Document @relation("assessent", fields: [documentId], references: [id], onDelete: Cascade)
  documentId String

  @@unique([riskDescription, mitigationStrategy])
}

model TestCase {
  id          String       @id @default(uuid())
  category    String       @db.VarChar(100)
  types       String       @db.VarChar(100)
  steps       String       @db.Text
  result      String       @db.VarChar(100)
  division    String       @db.VarChar(100)
  testType    TestcaseEnum
  timeCreated DateTime     @default(now())
  timeUpdate  DateTime     @updatedAt
  startDate   DateTime?
  endDate     DateTime?
  documentId  String

  //relation
  document Document @relation("testcase", fields: [documentId], references: [id], onDelete: Cascade)

  //foreign key
  testCaseDes   TesctCaseDes[]
  testCaseImage TestCaseImage[]

  //relation
  report Report[] @relation("reportcase")
}

model TestCaseImage {
  id         String   @id @default(uuid())
  path       String   @db.Text
  testCaseId String
  createdAt  DateTime @default(now())

  //relation
  testCase TestCase? @relation(fields: [testCaseId], references: [id])
}

model TesctCaseDes {
  id                 String   @id @default(uuid())
  startedDescription String?  @db.Text
  endedDescription   String?  @db.Text
  createdAt          DateTime @default(now())
  testCaseId         String
  //relation 
  testCase           TestCase @relation(fields: [testCaseId], references: [id])
}

model File {
  id         Int      @id @default(autoincrement())
  fileName   String   @db.VarChar(150)
  path       String   @db.Text
  createdAt  DateTime @default(now())
  documentId String

  //relation 
  document Document @relation(fields: [documentId], references: [id])
}


// model Permission {
//   id    String             @id @default(uuid())
//   kind  PermissionKindEnum
//   state String             @db.VarChar(100)

//   //relation
//   document    Document[]    @relation("document")
//   department  Department[]  @relation("department")
//   jobposition JobPosition[] @relation("jobposition")
//   timeCreated DateTime      @default(now())
//   timeAction  DateTime      @updatedAt
// }

model Report {
   id   String  @id @default(uuid())
   reportname String  @db.VarChar(200)
   reportpurpose String @db.VarChar(200)
   reportprocessing String @db.Text
   reportconclusion String? @db.VarChar(200)
   reportadvice String? @db.VarChar(200)
   isFull  Int?  @default(0)

  //relation
   team ReportTeam[]   @relation("reportteam")
   issue ReportIssue[] @relation("reportissue")
   testcase TestCase[] @relation("reportcase")
   @@map("report_document")
   @@unique([reportname, reportpurpose, reportprocessing,reportconclusion,reportadvice,id])
}

model ReportTeam {
  id String @id @default(uuid()) @unique
  name String @db.Text
  role String @db.VarChar(200)
  started  DateTime @default(now())
  ended DateTime @updatedAt

  //Relation
  reportId String
  report Report @relation("reportteam",fields: [reportId], references: [id], onDelete: Cascade)
  @@map("report_team")
}

model ReportIssue {
  id String @id @default(uuid()) @unique
  list String @db.Text
  level IssueLevel @default(LOW)
  value String @db.Text

  //relation
  reportId String
  report Report @relation("reportissue", fields: [reportId], references: [id])
  @@map("report_issue")
  @@unique([level, value])
}
